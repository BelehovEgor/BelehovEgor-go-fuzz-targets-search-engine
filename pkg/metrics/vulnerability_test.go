package metrics

import (
	"go/ast"
	"go/parser"
	"go/token"
	"testing"
)

func Test_InDependencyMetric_ShouldCount(t *testing.T) {
	tests := []struct {
		name       string
		funcSource string
		want       int
	}{
		{"NoParams", "package pkg\nfunc foo() {}", 0},
		{"OneParam", "package pkg\nfunc bar(a int) {}", 1},
		{"TwoParams", "package pkg\nfunc baz(a int, b string) {}", 2},
		{"VariadicParam", "package pkg\nfunc qux(a ...int) {}", 1},
		{"MixedParams", "package pkg\nfunc quux(a int, b ...string) {}", 2},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			fset := token.NewFileSet()
			file, err := parser.ParseFile(fset, "", tt.funcSource, 0)
			if err != nil {
				t.Fatal(err)
			}

			var funcDecl *ast.FuncDecl
			ast.Inspect(file, func(n ast.Node) bool {
				if fd, ok := n.(*ast.FuncDecl); ok {
					funcDecl = fd
					return false
				}
				return true
			})

			got := inDependencyMetric(funcDecl)
			if got != tt.want {
				t.Errorf("inDependencyMetric(%q) = %d, want %d", tt.funcSource, got, tt.want)
			}
		})
	}
}

func Test_outDependencyMetric_ShouldCount(t *testing.T) {
	tests := []struct {
		name     string
		bodyCode string
		want     int
	}{
		{
			name:     "SimpleCall",
			bodyCode: "a := 10\nb := 20\nc := sum(a, b)",
			want:     2,
		},
		{
			name:     "MultipleCalls",
			bodyCode: "a := 10\nb := 20\nc := sum(a, b)\nd := product(c, 30)",
			want:     3,
		},
		{
			name:     "SameVariableUsedTwice",
			bodyCode: "a := 10\nb := 20\nc := sum(a, b)\nd := product(c, a)",
			want:     3,
		},
		{
			name:     "NoCalls",
			bodyCode: "a := 10\nb := 20",
			want:     0,
		},
		{
			name:     "ComplexExpression",
			bodyCode: "a := 10\nb := 20\nc := sum(a, b)\nd := product(sum(b, 40), a + b)",
			want:     2,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			fset := token.NewFileSet()
			file, err := parser.ParseFile(fset, "", "package main\nfunc test() {\n"+tt.bodyCode+"\n}", 0)
			if err != nil {
				t.Fatal(err)
			}

			var body *ast.FuncDecl
			ast.Inspect(file, func(n ast.Node) bool {
				if fn, ok := n.(*ast.FuncDecl); ok {
					body = fn
					return false
				}
				return true
			})

			if body == nil {
				t.Fatalf("Failed to find function body")
			}

			got := outDependencyMetric(body)
			if got != tt.want {
				t.Errorf("Test case: %s. CountOutDependencies() = %v, want %v", tt.name, got, tt.want)
			}
		})
	}
}

func Test_CountOutDependencies_ShouldCount(t *testing.T) {
	tests := []struct {
		name     string
		bodyCode string
		want     int
	}{
		{
			name:     "SimpleCall",
			bodyCode: "a := 10\nb := 20\nc := sum(a, b)",
			want:     2,
		},
		{
			name:     "MultipleCalls",
			bodyCode: "a := 10\nb := 20\nc := sum(a, b)\nd := product(c, 30)",
			want:     3,
		},
		{
			name:     "SameVariableUsedTwice",
			bodyCode: "a := 10\nb := 20\nc := sum(a, b)\nd := product(c, a)",
			want:     3,
		},
		{
			name:     "NoCalls",
			bodyCode: "a := 10\nb := 20",
			want:     0,
		},
		{
			name:     "ComplexExpression",
			bodyCode: "a := 10\nb := 20\nc := sum(a, b)\nd := product(sum(b, 40), a + b)",
			want:     2,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			fset := token.NewFileSet()
			file, err := parser.ParseFile(fset, "", "package main\nfunc test() {\n"+tt.bodyCode+"\n}", 0)
			if err != nil {
				t.Fatal(err)
			}

			var body *ast.BlockStmt
			ast.Inspect(file, func(n ast.Node) bool {
				if fn, ok := n.(*ast.FuncDecl); ok {
					body = fn.Body
					return false
				}
				return true
			})

			if body == nil {
				t.Fatalf("Failed to find function body")
			}

			got := countOutDependencies(body)
			if got != tt.want {
				t.Errorf("Test case: %s. CountOutDependencies() = %v, want %v", tt.name, got, tt.want)
			}
		})
	}
}

func Test_CountNumbersOfPointerArithmetic_ShouldCount(t *testing.T) {
	tests := []struct {
		name        string
		functionSrc string
		want        int
	}{
		{
			name:        "No Pointer Arithmetic",
			functionSrc: "func example() {}",
			want:        0,
		},
		{
			name:        "Single Addition",
			functionSrc: "func example() { ptr := (*int)(nil); ptr++ }",
			want:        1,
		},
		{
			name:        "Single Subtraction",
			functionSrc: "func example() { ptr := (*int)(nil); ptr-- }",
			want:        1,
		},
		{
			name:        "Multiple Operations",
			functionSrc: "func example() { ptr := (*int)(nil); ptr++; ptr--; ptr += 5; ptr -= 7 }",
			want:        4,
		},
		{
			name:        "Mixed Operations",
			functionSrc: "func example() { ptr := (*int)(nil); ptr++; ptr += 5; i := 42; j := i + 1 }",
			want:        2,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			fset := token.NewFileSet()
			file, err := parser.ParseFile(fset, "", "package main\n"+tt.functionSrc, 0)
			if err != nil {
				t.Fatal(err)
			}

			var funcDecl *ast.FuncDecl
			ast.Inspect(file, func(n ast.Node) bool {
				if fd, ok := n.(*ast.FuncDecl); ok {
					funcDecl = fd
					return false
				}
				return true
			})

			if funcDecl == nil {
				t.Fatalf("Failed to find function declaration")
			}

			//got := countNumbersOfPointerArithmetic(funcDecl)
			//if got != tt.want {
			//	t.Errorf("Test case: %s. countNumbersOfPointerArithmetic() = %d, want %d", tt.name, got, tt.want)
			//}
		})
	}
}

func Test_NumbersOfNestedControlStructures_ShouldCount(t *testing.T) {
	tests := []struct {
		name       string
		funcSource string
		want       int
	}{
		{"NoControlStructures", "func foo() {}", 0},
		{"OneForLoop", "func bar() { for i := 0; i < 10; i++ {} }", 1},
		{"OneIfStatement", "func baz() { if true {} }", 1},
		{"OneSwitchStatement", "func qux() { switch {} }", 1},
		{"OneSelectStatement", "func quux() { select {} }", 1},
		{"NestedForLoops", "func corge() { for i := 0; i < 10; i++ { for j := 0; j < 10; j++ {} } }", 2},
		{"NestedIfStatements", "func grault() { if true { if false {} } }", 2},
		{"MixedControlStructures", "func garply() { for i := 0; i < 10; i++ { if true { switch {} } } }", 3},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			fset := token.NewFileSet()
			file, err := parser.ParseFile(fset, "", "package main\n"+tt.funcSource, 0)
			if err != nil {
				t.Fatal(err)
			}

			var funcDecl *ast.FuncDecl
			ast.Inspect(file, func(n ast.Node) bool {
				if fd, ok := n.(*ast.FuncDecl); ok {
					funcDecl = fd
					return false
				}
				return true
			})

			if funcDecl == nil {
				t.Fatalf("Failed to find function declaration")
			}

			got := numbersOfNestedControlStructures(funcDecl)
			if got != tt.want {
				t.Errorf("numbersOfNestedControlStructures() = %d, want %d", got, tt.want)
			}
		})
	}
}

func Test_MaxNestingLevelOfControlStructures_ShouldCount(t *testing.T) {
	tests := []struct {
		name       string
		funcSource string
		want       int
	}{
		{"NoControlStructures", "func foo() {}", 0},
		{"OneForLoop", "func bar() { for i := 0; i < 10; i++ {} }", 1},
		{"OneIfStatement", "func baz() { if true {} }", 1},
		{"OneSwitchStatement", "func qux() { switch {} }", 1},
		{"OneSelectStatement", "func quux() { select {} }", 1},
		{"NestedForLoops", "func corge() { for i := 0; i < 10; i++ { for j := 0; j < 10; j++ {} } }", 2},
		{"NestedIfStatements", "func grault() { if true { if false {} } }", 2},
		{"MixedControlStructures", "func garply() { for i := 0; i < 10; i++ { if true { switch {} }; if true { } } }", 3},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			fset := token.NewFileSet()
			file, err := parser.ParseFile(fset, "", "package main\n"+tt.funcSource, 0)
			if err != nil {
				t.Fatal(err)
			}

			var funcDecl *ast.FuncDecl
			ast.Inspect(file, func(n ast.Node) bool {
				if fd, ok := n.(*ast.FuncDecl); ok {
					funcDecl = fd
					return false
				}
				return true
			})

			if funcDecl == nil {
				t.Fatalf("Failed to find function declaration")
			}

			got := maxNestingLevelOfControlStructures(funcDecl)
			if got != tt.want {
				t.Errorf("maxNestingLevelOfControlStructures() = %d, want %d", got, tt.want)
			}
		})
	}
}

func Test_MaxOfControlDependentControlStructures_ShouldCount(t *testing.T) {
	tests := []struct {
		name       string
		funcSource string
		want       int
	}{
		{"NoControlStructures", "func foo() {}", 0},
		{"OneForLoop", "func bar() { for i := 0; i < 10; i++ {} }", 1},
		{"OneIfStatement", "func baz() { if true {} }", 1},
		{"OneSwitchStatement", "func qux() { switch {} }", 1},
		{"OneSelectStatement", "func quux() { select {} }", 1},
		{"OneIfAndSelectStatement", "func quux() { if true {}; select {} }", 1},
		{"NestedForLoops", "func corge() { for i := 0; i < 10; i++ { for j := 0; j < 10; j++ {} } }", 2},
		{"NestedIfStatements", "func grault() { if true { if false {} } }", 2},
		{"MixedControlStructures", "func garply() { for i := 0; i < 10; i++ { if true { switch {} } } }", 3},
		{"MixedControlStructuresInDifferentLevel",
			"func garply() { for i := 0; i < 10; i++ { if true { switch {} }; if true { } }; if true { } }", 4},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			fset := token.NewFileSet()
			file, err := parser.ParseFile(fset, "", "package main\n"+tt.funcSource, 0)
			if err != nil {
				t.Fatal(err)
			}

			var funcDecl *ast.FuncDecl
			ast.Inspect(file, func(n ast.Node) bool {
				if fd, ok := n.(*ast.FuncDecl); ok {
					funcDecl = fd
					return false
				}
				return true
			})

			if funcDecl == nil {
				t.Fatalf("Failed to find function declaration")
			}

			got := maxOfControlDependentControlStructures(funcDecl)
			if got != tt.want {
				t.Errorf("maxOfControlDependentControlStructures() = %d, want %d", got, tt.want)
			}
		})
	}
}

func Test_NumbersOfIfStructuresWithoutElse_ShouldCount(t *testing.T) {
	tests := []struct {
		name       string
		funcSource string
		want       int
	}{
		{"NoIfStatements", "func foo() {}", 0},
		{"OneIfWithElse", "func bar() { if true { } else { } }", 0},
		{"OneIfWithoutElse", "func baz() { if true { } }", 1},
		{"MultipleIfs", "func qux() { if true { }; if false { } }", 2},
		{"MixedIfs", "func quux() { if true { } else { }; if false { } }", 1},
		{"NestedIfs", "func quuux() { if true { if false { } } }", 2},
		{"MixedNestedIfs", "func corge() { if true { if false { } else { } } }", 1},
		{"NestedForLoops", "func corge() { for i := 0; i < 10; i++ { for j := 0; j < 10; j++ {} } }", 2},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			fset := token.NewFileSet()
			file, err := parser.ParseFile(fset, "", "package main\n"+tt.funcSource, 0)
			if err != nil {
				t.Fatal(err)
			}

			var funcDecl *ast.FuncDecl
			ast.Inspect(file, func(n ast.Node) bool {
				if fd, ok := n.(*ast.FuncDecl); ok {
					funcDecl = fd
					return false
				}
				return true
			})

			if funcDecl == nil {
				t.Fatalf("Failed to find function declaration")
			}

			got := numbersOfVariablesInvolvedInControlPredicates(funcDecl)
			if got != tt.want {
				t.Errorf("numbersOfVariablesInvolvedInControlPredicates() = %d, want %d", got, tt.want)
			}
		})
	}
}

func Test_NumbersOfVariablesInvolvedInControlPredicates_ShouldCount(t *testing.T) {
	tests := []struct {
		name       string
		funcSource string
		want       int
	}{
		{"NoIfStatements", "func foo() {}", 0},
		{"OneIfWithElse", "func bar() { if true { } else { } }", 0},
		{"OneIfWithoutElse", "func baz() { if true { } }", 0},
		{"OneVar", "func qux(x bool) { if x { } }", 1},
		{"OneVarUsedTwice", "func qux(x bool) { if x { }; if !x {} }", 1},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			fset := token.NewFileSet()
			file, err := parser.ParseFile(fset, "", "package main\n"+tt.funcSource, 0)
			if err != nil {
				t.Fatal(err)
			}

			var funcDecl *ast.FuncDecl
			ast.Inspect(file, func(n ast.Node) bool {
				if fd, ok := n.(*ast.FuncDecl); ok {
					funcDecl = fd
					return false
				}
				return true
			})

			if funcDecl == nil {
				t.Fatalf("Failed to find function declaration")
			}

			got := numbersOfIfStructuresWithoutElse(funcDecl)
			if got != tt.want {
				t.Errorf("numbersOfIfStructuresWithoutElse() = %d, want %d", got, tt.want)
			}
		})
	}
}
